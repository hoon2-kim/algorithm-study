// 소수 찾기

// 문제 설명
// 1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

// 소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
// (1은 소수가 아닙니다.)

// 제한 조건
// n은 2이상 1000000이하의 자연수입니다.
// 입출력 예
// n	result
// 10	4
// 5	3
// 입출력 예 설명
// 입출력 예 #1
// 1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환

// 입출력 예 #2
// 1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환

// ---------------------------------------------------------------------------------------------------------------------

// 나의 풀이
function solution(n) {
    let arr = Array(n + 1)
        .fill(true)
        .fill(false, 0, 2);

    for (let i = 2; i * i <= n; i++) {
        if (arr[i]) {
            for (let j = i * i; j <= n; j += i) {
                arr[j] = false;
            }
        }
    }
    return arr.filter((e) => e).length;
}

// 소수 찾기는 에라토스테네스의 체를 이용하여 풀었다(구글링)

/** 에라토스테네스의 체란?
 * 2~120까지의 수를 예로들면(1은 소수가 아니다)
 * 2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다
 * 2는 소수이므로 오른쪽에 2를 쓴다
 * 자기 자신을 제외한 2의 배수를 모두 지운다
 * 남아있는 수 가운데 3은 소수이므로 오른쪽에 쓴다
 * 자기 자신을 제외한 3의 배수를 모두 지운다
 * 남아있는 수 가운데 5는 소수이므로 오른쪽에 쓴다
 * 자기 자신을 제외한 5의 배수를 모두 지운다
 * 남아있는 수 가운데 7은 소수이므로 오른쪽에 쓴다
 * 자기 자신을 제외한 7의 배수를 모두 지운다
 * 위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다
 *
 * 그래서 2~120의 경우 11^2 > 120 이므로 11보다 작은 수 의 배수들만 지워도 충분
 * 즉, 2,3,5,7의 배수를 지우고 남는 수는 모두 소수이다
 */

// 에라토스테네스의 체 구현
//  function solution(n) {
//     let arr = Array(n + 1) // 주어진 숫자 포함한 배열 만듬(Array(n+1)) / 0부터라서
//       .fill(true)
//       .fill(false, 0, 2); // 0,1은 소수가 아니니 false로 바꿈

//     for (let i = 2; i * i <= n; i++) {
//       if (arr[i]) {
//         for (let j = i * i; j <= n; j += i) {
//           arr[j] = false;
//           // j는 i의 제곱
//           // j=i*i가 n보다 작을 때 까지
//           // j+i씩 증가
//           // i가 2일 경우 4,6,8,10...100
//           // i가 3일 경우 9,12,15,18...99
//         }
//       }
//     }
//     return arr; // 이렇게만 하면 false,true 배열 반환
//     return arr.filter((e) => e).length; // 소수 개수 반환
//     return arr.map((v, i) => (v ? i : 0)).filter((e) => e); // 소수 반환
//   }
//   console.log(solution(10));

//   // arr.filter((e)=>e) 만 하면 true만 반환
